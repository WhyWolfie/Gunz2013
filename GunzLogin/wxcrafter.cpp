//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainDialogBaseClass::MainDialogBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(mainSizer);
    
    wxBoxSizer* boxSizer19 = new wxBoxSizer(wxVERTICAL);
    
    mainSizer->Add(boxSizer19, 1, wxALL|wxEXPAND, 5);
    
    wxGridSizer* gridSizer17 = new wxGridSizer(  0, 2, 0, -130);
    
    boxSizer19->Add(gridSizer17, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextID = new wxStaticText(this, wxID_ANY, _("Username"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridSizer17->Add(m_staticTextID, 0, wxALL, 5);
    
    m_textCtrlID = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_textCtrlID->SetToolTip(_("If the ID does not exists, new account will be created."));
    
    gridSizer17->Add(m_textCtrlID, 0, wxALL|wxEXPAND, 5);
    
    wxGridSizer* gridSizer21 = new wxGridSizer(  0, 2, 0, -130);
    
    boxSizer19->Add(gridSizer21, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextPW = new wxStaticText(this, wxID_ANY, _("Password"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridSizer21->Add(m_staticTextPW, 0, wxALL, 5);
    
    m_textCtrlPW = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_PASSWORD);
    m_textCtrlPW->SetToolTip(_("Your user password."));
    
    gridSizer21->Add(m_textCtrlPW, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    
    mainSizer->Add(boxSizer12, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_buttonOK = new wxButton(this, wxID_OK, _("Login"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_buttonOK->SetDefault();
    
    boxSizer12->Add(m_buttonOK, 0, wxALL, 5);
    
    SetSizeHints(300,150);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(MainDialogBaseClass::OnExit), NULL, this);
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(MainDialogBaseClass::OnInit), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnButtonOK), NULL, this);
    
}

MainDialogBaseClass::~MainDialogBaseClass()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(MainDialogBaseClass::OnExit), NULL, this);
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(MainDialogBaseClass::OnInit), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnButtonOK), NULL, this);
    
}
